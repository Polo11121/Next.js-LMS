
generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  courses       Course[]
  enrollments   Enrollment[]
  stripeCustomerId String? @unique

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum CourseLevel {
  Beginner
  Intermediate
  Advanced
}

enum CourseStatus {
  Draft
  Published
  Archived
}

enum CourseCategory {
  Development
  Business
  Finance
  It_And_Software
  Office_Productivity
  Personal_Development
  Design
  Marketing
  Music
  Lifestyle
  Health_And_Fitness
  Productivity
  Personal_Branding
  Self_Improvement
  Other
}

model Course {
  id               String         @id @default(uuid())
  title            String
  description      String
  fileKey          String
  price            Int
  duration         Int
  level            CourseLevel    @default(Beginner)
  category         CourseCategory
  smallDescription String
  slug             String         @unique
  status           CourseStatus   @default(Draft)
  stripePriceId    String         @unique
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  chapters Chapter[]
  Enrollment Enrollment[]

  @@map("course")
}


model Chapter{
  id String @id @default(uuid())
  title String
  position Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  lessons Lesson[]

  @@map("chapter")
}


model Lesson{
  id String @id @default(uuid())
  title String
  description String?
  thumbnailKey String?
  videoKey String?
  position Int

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lesson")
}

enum EnrollmentStatus{
  Pending
  Active
  Canceled
}

model Enrollment{
  id String @id @default(uuid())
  amount Int
  userId String
  status EnrollmentStatus @default(Pending)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("enrollment")
  @@unique([userId, courseId])
}